static ac_fixed<8,1,true,AC_RND,AC_SAT> tanh_table[256] = {
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.99218750,
-0.98437500,
-0.98437500,
-0.98437500,
-0.98437500,
-0.98437500,
-0.98437500,
-0.98437500,
-0.98437500,
-0.98437500,
-0.98437500,
-0.98437500,
-0.97656250,
-0.97656250,
-0.97656250,
-0.97656250,
-0.97656250,
-0.97656250,
-0.97656250,
-0.96875000,
-0.96875000,
-0.96875000,
-0.96875000,
-0.96875000,
-0.96875000,
-0.96093750,
-0.96093750,
-0.96093750,
-0.96093750,
-0.95312500,
-0.95312500,
-0.95312500,
-0.94531250,
-0.94531250,
-0.94531250,
-0.94531250,
-0.93750000,
-0.93750000,
-0.92968750,
-0.92968750,
-0.92968750,
-0.92187500,
-0.92187500,
-0.91406250,
-0.91406250,
-0.90625000,
-0.90625000,
-0.89843750,
-0.89843750,
-0.89062500,
-0.88281250,
-0.88281250,
-0.87500000,
-0.86718750,
-0.85937500,
-0.85937500,
-0.85156250,
-0.84375000,
-0.83593750,
-0.82812500,
-0.82031250,
-0.81250000,
-0.80468750,
-0.79687500,
-0.78906250,
-0.78125000,
-0.77343750,
-0.75781250,
-0.75000000,
-0.74218750,
-0.72656250,
-0.71875000,
-0.71093750,
-0.69531250,
-0.67968750,
-0.67187500,
-0.65625000,
-0.64062500,
-0.63281250,
-0.61718750,
-0.60156250,
-0.58593750,
-0.57031250,
-0.55468750,
-0.53906250,
-0.52343750,
-0.50000000,
-0.48437500,
-0.46875000,
-0.44531250,
-0.42968750,
-0.40625000,
-0.39062500,
-0.36718750,
-0.35156250,
-0.32812500,
-0.30468750,
-0.28906250,
-0.26562500,
-0.24218750,
-0.21875000,
-0.19531250,
-0.17187500,
-0.14843750,
-0.12500000,
-0.10937500,
-0.08593750,
-0.06250000,
-0.03906250,
-0.01562500,
0.01562500,
0.03906250,
0.06250000,
0.08593750,
0.10937500,
0.12500000,
0.14843750,
0.17187500,
0.19531250,
0.21875000,
0.24218750,
0.26562500,
0.28906250,
0.30468750,
0.32812500,
0.35156250,
0.36718750,
0.39062500,
0.40625000,
0.42968750,
0.44531250,
0.46875000,
0.48437500,
0.50000000,
0.52343750,
0.53906250,
0.55468750,
0.57031250,
0.58593750,
0.60156250,
0.61718750,
0.63281250,
0.64062500,
0.65625000,
0.67187500,
0.67968750,
0.69531250,
0.71093750,
0.71875000,
0.72656250,
0.74218750,
0.75000000,
0.75781250,
0.77343750,
0.78125000,
0.78906250,
0.79687500,
0.80468750,
0.81250000,
0.82031250,
0.82812500,
0.83593750,
0.84375000,
0.85156250,
0.85937500,
0.85937500,
0.86718750,
0.87500000,
0.88281250,
0.88281250,
0.89062500,
0.89843750,
0.89843750,
0.90625000,
0.90625000,
0.91406250,
0.91406250,
0.92187500,
0.92187500,
0.92968750,
0.92968750,
0.92968750,
0.93750000,
0.93750000,
0.94531250,
0.94531250,
0.94531250,
0.94531250,
0.95312500,
0.95312500,
0.95312500,
0.96093750,
0.96093750,
0.96093750,
0.96093750,
0.96875000,
0.96875000,
0.96875000,
0.96875000,
0.96875000,
0.96875000,
0.97656250,
0.97656250,
0.97656250,
0.97656250,
0.97656250,
0.97656250,
0.97656250,
0.98437500,
0.98437500,
0.98437500,
0.98437500,
0.98437500,
0.98437500,
0.98437500,
0.98437500,
0.98437500,
0.98437500,
0.98437500,
0.99218750,
0.99218750,
0.99218750,
0.99218750,
0.99218750,
0.99218750,
0.99218750,
0.99218750,
0.99218750,
0.99218750,
0.99218750,
0.99218750,
0.99218750,
0.99218750,
0.99218750,
0.99218750,
0.99218750,
0.99218750,
0.99218750};

#include <stdint.h>

template
<
typename O_TYPE,
typename I_TYPE
>
O_TYPE tanh_lut(I_TYPE input)
{
	const ac_int<3,true> lower_limit = -3.0;
	const ac_int<3, true> upper_limit = 3.0;
	const ac_fixed<8,6,false> recip_step = 42.5;

	O_TYPE output;

	// If we are outside of LUT range
	if (input < lower_limit)
	{
		output = -0.99218750;
	}
	else if (input > upper_limit)
	{
		output = 0.99218750;
	}
	else
	{
		auto t = input + upper_limit;
		auto index = t*recip_step;
		uint16_t index_int = index.to_uint();
		output = tanh_table[index_int];
	}

	return output;
}
